data$Metrik1 <- as.numeric(data$Metrik1)
data$Metrik2 <- as.numeric(data$Metrik2)
data$EventTimestamp <- as.numeric(data$EventTimestamp)
data$EventDay <- as.character(data$EventDay)
data$PatientID <- as.character(data$PatientID)
return(data)
}
execFunctionForAllAgencies <- function(fct, patientType, mfrowCount1, mfrowCount2, funtionType) {
allRawData <- NULL
par(mfrow = c(mfrowCount1, mfrowCount2), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,8,1) + 0.1)
for (i in 1:length(praxen)) {
dataIndicator = praxen[i]
print(paste0("Praxis: ", dataIndicator));
if (i == 3) { docs = 2 }
else if (i == 2) { docs = 4 }
else { docs = 1 }
RawData  <-  read.csv(paste0(dataFolder, 'eventMetrics', dataIndicator, '.csv'), sep = ";", quote = "\"'", dec = ",") %>%
left_join(read.csv(paste0(dataFolder, 'dailyAppointmentMetrics', dataIndicator, '.csv'), sep = ";", quote = "\"'", dec = ","), by = eventIndicator) %>%
left_join(read.csv(paste0(dataFolder, 'dailyPerAgentAppointmentMetrics', dataIndicator, '.csv'), sep = ";", quote = "\"'", dec = ","), by = eventIndicator)
RawData  <-  cleanRawData(RawData)
if (modData) {
RawData <- modDataFunction(RawData);
}
if ((patientType == 1) || (patientType == -1)) {
# Datensatz fuer Stammpatienten
Stammpatienten <- RawData[RawData$Stammpatient %in% c("1"), ]
fct(paste0(funtionType, " bezueglich Stammpatienten"), Stammpatienten)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
if (forEveryDoc && (docs > 1)) {
for (j in 1:docs) {
StammpatientenBeiDocJ <- Stammpatienten[Stammpatienten$AgentTag == j, ]
if ((!is_empty(StammpatientenBeiDocJ)) && (length(StammpatientenBeiDocJ[, 1]) > 0)) {
fct(paste0(funtionType, " bezueglich Stammpatienten bei Arzt ", j), StammpatientenBeiDocJ)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
}
}
if  ((patientType == 0) || (patientType == -1)) {
# Datensatz fuer Nicht-Stammpatienten
NichtStammpatienten <- RawData[RawData$Stammpatient %in% c("0"), ]
fct(paste0(funtionType, " bezueglich Nicht-Stammpatienten"), NichtStammpatienten)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
if (forEveryDoc && (docs > 1)) {
for (j in 1:docs) {
NichtStammpatientenBeiDocJ <- NichtStammpatienten[NichtStammpatienten$AgentTag == j, ]
if ((!is_empty(NichtStammpatientenBeiDocJ)) && (length(NichtStammpatientenBeiDocJ[, 1]) > 0)) {
fct(paste0(funtionType, " bezueglich Nicht-Stammpatienten bei Arzt ", j), NichtStammpatientenBeiDocJ)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
}
}
if (patientType == -1) {
# Datensatz fuer alle Patienten
fct(paste0(funtionType, " bezueglich allen Patienten"), RawData)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
if (forEveryDoc && (docs > 1)) {
for (j in 1:docs) {
PatientenBeiDocJ <- RawData[RawData$AgentTag == j, ]
if ((!is_empty(PatientenBeiDocJ)) && (length(PatientenBeiDocJ[, 1]) > 0)) {
fct(paste0(funtionType, " bezueglich allen Stammpatienten bei Arzt ", j), PatientenBeiDocJ)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
}
}
test <- length(RawData[,1])
print(test)
testest1 <- RawData
testest2 <- allRawData
allRawData <<- rbind(testest1, testest2)
if( i == 1) {
testesttest1 <<- RawData;
testesttest1$Agency <-  'B'
} else if (i == 2) {
testesttest2 <<- RawData;
testesttest2$Agency <- 'IML'
} else if ( i == 3) {
testesttest3 <<- RawData;
testesttest3$Agency <- 'WD'
} else {
testesttest4 <<- RawData;
testesttest4$Agency <- 'NA'
}
}
ttest <<- allRawData
if ((patientType == 1) || (patientType == -1)) {
# Datensatz fuer Stammpatienten
Stammpatienten <- allRawData[allRawData$Stammpatient %in% c("1"), ]
fct(paste0(funtionType, " bezueglich Stammpatienten"), Stammpatienten)
mtext(paste0("Alle Praxen zusammengelegt - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
if  ((patientType == 0) || (patientType == -1)) {
# Datensatz fuer Nicht-Stammpatienten
NichtStammpatienten <- allRawData[allRawData$Stammpatient %in% c("0"), ]
fct(paste0(funtionType, " bezueglich Nicht-Stammpatienten"), NichtStammpatienten)
mtext(paste0("Alle Praxen zusammengelegt - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
if (patientType == -1) {
# Datensatz fuer alle Patienten
fct(paste0(funtionType, " bezueglich allen Patienten"), allRawData)
mtext(paste0("Alle Praxen zusammengelegt - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
print_explanation <- function (header, text) {
par(mfrow = c(1, 1), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,4,1) + 0.1)
print_output(header, text);
}
percent <- function(x, digits = 2, format = "f") {
paste0(format(100 * x, format = format, digits = (digits + 2)), "%")
}
## Variables
# Wir haben die Datensaetze 'IML', 'WD' und 'B' und dieses sind im Ordner 'rawData' gespeichert
dataFolder     = 'rawData/'
praxen         = c('B', 'IML',  'WD')
eventIndicator = c('AgentTag', 'EventSubmitDay', 'EventDay', 'EventTimestamp', 'PatientID')
## Scripts
library(MASS)
library(lattice)
library(corrplot)
library(dplyr)
library(ltm)
library(tidyverse)
library(lubridate)
library(polycor)
library(ggplot2)
library(car)
print_output <- function(header, output, cex = 0.75) {
tmp <- capture.output(output)
plot.new()
title(header, cex.main = 1.25 * cex, line = 0.5)
text(0, 1, paste0(tmp, collapse='\n'), adj = c(0,1), family = 'mono', cex = cex)
box()
}
print_reg <- function(header, dataset, reg_fct) {
if (length(dataset[,1]) > 0) {
if (NutzeTagesSpannen) {
if (!is.null(tagesSpannen) & (length(tagesSpannen) > 0) & (max(lengths(tagesSpannen)) == 2) & (min(lengths(tagesSpannen)) == 2)) {
par(mfrow = c(ceiling(sqrt(length(tagesSpannen))), ceiling(sqrt(length(tagesSpannen)))), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,4,1) + 0.1)
for (j in 1:length(tagesSpannen)) {
timespanData = dataset[(dataset$IndirectWaitingPeriod %in% seq(max(min(dataset$IndirectWaitingPeriod), tagesSpannen[[j]][1]), min(max(dataset$IndirectWaitingPeriod), tagesSpannen[[j]][2]))), ]
blm.fit <- reg_fct(timespanData)
print_output(paste0("Tagesspanne: von ", tagesSpannen[[j]][1], " bis ", tagesSpannen[[j]][2]) , summary(blm.fit))
}
} else print_output(header, "Keine Tagesspannen verfuegbar oder mindestens eine der Tagesspannen hat das falsche Format")
mtext(header, side = 3, line = -1.1, outer = TRUE, cex = 0.75)
} else {
blm.fit <- reg_fct(dataset)
print_output(header, summary(blm.fit))
}
} else {
if (NutzeTagesSpannen) par(mfrow = c(1, 1), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,8,1) + 0.1)
print_output(header, "Keine Daten verfuegbar")
}
}
cleanRawData <- function(data) {
data[,c('X.x', 'X.y', 'X')] <- NULL;
sapply(data, class)
data$Metrik1 <- as.numeric(data$Metrik1)
data$Metrik2 <- as.numeric(data$Metrik2)
data$EventTimestamp <- as.numeric(data$EventTimestamp)
data$EventDay <- as.character(data$EventDay)
data$PatientID <- as.character(data$PatientID)
return(data)
}
execFunctionForAllAgencies <- function(fct, patientType, mfrowCount1, mfrowCount2, funtionType) {
allRawData <- NULL
par(mfrow = c(mfrowCount1, mfrowCount2), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,8,1) + 0.1)
for (i in 1:length(praxen)) {
dataIndicator = praxen[i]
print(paste0("Praxis: ", dataIndicator));
if (i == 3) { docs = 2 }
else if (i == 2) { docs = 4 }
else { docs = 1 }
RawData  <-  read.csv(paste0(dataFolder, 'eventMetrics', dataIndicator, '.csv'), sep = ";", quote = "\"'", dec = ",") %>%
left_join(read.csv(paste0(dataFolder, 'dailyAppointmentMetrics', dataIndicator, '.csv'), sep = ";", quote = "\"'", dec = ","), by = eventIndicator) %>%
left_join(read.csv(paste0(dataFolder, 'dailyPerAgentAppointmentMetrics', dataIndicator, '.csv'), sep = ";", quote = "\"'", dec = ","), by = eventIndicator)
RawData  <-  cleanRawData(RawData)
if (modData) {
RawData <- modDataFunction(RawData);
}
if ((patientType == 1) || (patientType == -1)) {
# Datensatz fuer Stammpatienten
Stammpatienten <- RawData[RawData$Stammpatient %in% c("1"), ]
fct(paste0(funtionType, " bezueglich Stammpatienten"), Stammpatienten)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
if (forEveryDoc && (docs > 1)) {
for (j in 1:docs) {
StammpatientenBeiDocJ <- Stammpatienten[Stammpatienten$AgentTag == j, ]
if ((!is_empty(StammpatientenBeiDocJ)) && (length(StammpatientenBeiDocJ[, 1]) > 0)) {
fct(paste0(funtionType, " bezueglich Stammpatienten bei Arzt ", j), StammpatientenBeiDocJ)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
}
}
if  ((patientType == 0) || (patientType == -1)) {
# Datensatz fuer Nicht-Stammpatienten
NichtStammpatienten <- RawData[RawData$Stammpatient %in% c("0"), ]
fct(paste0(funtionType, " bezueglich Nicht-Stammpatienten"), NichtStammpatienten)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
if (forEveryDoc && (docs > 1)) {
for (j in 1:docs) {
NichtStammpatientenBeiDocJ <- NichtStammpatienten[NichtStammpatienten$AgentTag == j, ]
if ((!is_empty(NichtStammpatientenBeiDocJ)) && (length(NichtStammpatientenBeiDocJ[, 1]) > 0)) {
fct(paste0(funtionType, " bezueglich Nicht-Stammpatienten bei Arzt ", j), NichtStammpatientenBeiDocJ)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
}
}
if (patientType == -1) {
# Datensatz fuer alle Patienten
fct(paste0(funtionType, " bezueglich allen Patienten"), RawData)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
if (forEveryDoc && (docs > 1)) {
for (j in 1:docs) {
PatientenBeiDocJ <- RawData[RawData$AgentTag == j, ]
if ((!is_empty(PatientenBeiDocJ)) && (length(PatientenBeiDocJ[, 1]) > 0)) {
fct(paste0(funtionType, " bezueglich allen Stammpatienten bei Arzt ", j), PatientenBeiDocJ)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
}
}
test <- length(RawData[,1])
print(test)
testest1 <- RawData
testest2 <- allRawData
allRawData <<- rbind(testest1, testest2)
if( i == 1) {
testesttest1 <<- RawData;
testesttest1$Agency <-  'B'
} else if (i == 2) {
testesttest2 <<- RawData;
testesttest2$Agency <- 'IML'
} else if ( i == 3) {
testesttest3 <<- RawData;
testesttest3$Agency <- 'WD'
} else {
testesttest4 <<- RawData;
testesttest4$Agency <- 'NA'
}
}
ttest <<- allRawData
if ((patientType == 1) || (patientType == -1)) {
# Datensatz fuer Stammpatienten
Stammpatienten <- allRawData[allRawData$Stammpatient %in% c("1"), ]
fct(paste0(funtionType, " bezueglich Stammpatienten"), Stammpatienten)
mtext(paste0("Alle Praxen zusammengelegt - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
if  ((patientType == 0) || (patientType == -1)) {
# Datensatz fuer Nicht-Stammpatienten
NichtStammpatienten <- allRawData[allRawData$Stammpatient %in% c("0"), ]
fct(paste0(funtionType, " bezueglich Nicht-Stammpatienten"), NichtStammpatienten)
mtext(paste0("Alle Praxen zusammengelegt - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
if (patientType == -1) {
# Datensatz fuer alle Patienten
fct(paste0(funtionType, " bezueglich allen Patienten"), allRawData)
mtext(paste0("Alle Praxen zusammengelegt - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
print_explanation <- function (header, text) {
par(mfrow = c(1, 1), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,4,1) + 0.1)
print_output(header, text);
}
percent <- function(x, digits = 2, format = "f") {
paste0(format(100 * x, format = format, digits = (digits + 2)), "%")
}
## Setup
###########
# Falls modData auf TRUE gesetzt wird, wird eine Funktion modDataFunction erwartet
# die die Input-Daten im Argument erhält und diese modifiziert wieder zurückgibt
modData = FALSE;
# Falls forEveryDoc auf TRUE gesetzt ist, so wird für jede Praxis mit mehr als einem Arzt
# zusätzlich zu der Untersuchung bzgl. der Gesamtpraxis auch die Untersuchung für jeden Arzt durchgeführt
forEveryDoc = TRUE;
# boolean: NutzeTagesSpannen
#  - falls FALSE wird Regression ueber alle IndirectWaitingPerdiod erstellt
#  - falls TRUE wird fuer jeden Vector c(a, b) in der Liste tagesSpannen jeweils eine Regression fuer IndirectWaitingPerdiod in [a, b] erstellt
NutzeTagesSpannen = FALSE;
tagesSpannen <- list( c(0, 7), c(8,14), c(15, 56), c(57, 250) )
source("functions.R")
# Die Regression die wir durchfuehren moechten, definieren wir hier
calc_binReg <- function(dataset) {
#result <- glm(Attended ~ freeSlots + shortSlots + bookedSlots, data = dataset, family = binomial)
result <- glm(Attended ~ IndirectWaitingPeriod + Metrik1 + Metrik2, data = dataset, family = binomial)
return(result)
}
# Die Print-Funktion die speziell für Regressionen angepasst ist definieren wir hier
dailyAppointmentsVsFuture <- function(title, data) {
print_reg(title, data, calc_binReg)
}
# Title-Seite zum späteren Füllen mit Beschreibung/Erklärung
print_explanation("Attended Binomal Regressions", "Text");
## Auszuführendes Skript übergeben, sodass es jeweils für alle Praxen ausgeführt wird
# execFunctionForAllAgencies(fct, patientType, mfrowCount1, mfrowCount2, funtionType) :
# - fct: die oben definierte Funktion, die für jede Praxis einzeln und für alle gemeinsam ausgeführt werden soll
# - patientType: für welche Patienten soll es durchgeführt werden, -1: alle Patienten, 1: Stammpatienten, 0: Nicht-Stammpatienten
# - mfrowCount1: Anzahl der Spalten von Plots pro Seite
# - mfrowCount2: Anzahl der Zeilen von Plots pro Seite
# - funtionType: Beschreibung der Funktion
execFunctionForAllAgencies(dailyAppointmentsVsFuture, -1, 3, 1, "Binomiale Regression")
data2 <- rbind(testesttest1, testesttest2)
data <- rbind(data2, testesttest3)
View(data)
View(testesttest1)
## Variables
# Wir haben die Datensaetze 'IML', 'WD' und 'B' und dieses sind im Ordner 'rawData' gespeichert
dataFolder     = 'rawData/'
praxen         = c('B', 'IML',  'WD')
eventIndicator = c('AgentTag', 'EventSubmitDay', 'EventDay', 'EventTimestamp', 'PatientID')
## Scripts
library(MASS)
library(lattice)
library(corrplot)
library(dplyr)
library(ltm)
library(tidyverse)
library(lubridate)
library(polycor)
library(ggplot2)
library(car)
print_output <- function(header, output, cex = 0.75) {
tmp <- capture.output(output)
plot.new()
title(header, cex.main = 1.25 * cex, line = 0.5)
text(0, 1, paste0(tmp, collapse='\n'), adj = c(0,1), family = 'mono', cex = cex)
box()
}
print_reg <- function(header, dataset, reg_fct) {
if (length(dataset[,1]) > 0) {
if (NutzeTagesSpannen) {
if (!is.null(tagesSpannen) & (length(tagesSpannen) > 0) & (max(lengths(tagesSpannen)) == 2) & (min(lengths(tagesSpannen)) == 2)) {
par(mfrow = c(ceiling(sqrt(length(tagesSpannen))), ceiling(sqrt(length(tagesSpannen)))), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,4,1) + 0.1)
for (j in 1:length(tagesSpannen)) {
timespanData = dataset[(dataset$IndirectWaitingPeriod %in% seq(max(min(dataset$IndirectWaitingPeriod), tagesSpannen[[j]][1]), min(max(dataset$IndirectWaitingPeriod), tagesSpannen[[j]][2]))), ]
blm.fit <- reg_fct(timespanData)
print_output(paste0("Tagesspanne: von ", tagesSpannen[[j]][1], " bis ", tagesSpannen[[j]][2]) , summary(blm.fit))
}
} else print_output(header, "Keine Tagesspannen verfuegbar oder mindestens eine der Tagesspannen hat das falsche Format")
mtext(header, side = 3, line = -1.1, outer = TRUE, cex = 0.75)
} else {
blm.fit <- reg_fct(dataset)
print_output(header, summary(blm.fit))
}
} else {
if (NutzeTagesSpannen) par(mfrow = c(1, 1), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,8,1) + 0.1)
print_output(header, "Keine Daten verfuegbar")
}
}
cleanRawData <- function(data) {
data[,c('X.x', 'X.y', 'X')] <- NULL;
sapply(data, class)
data$Metrik1 <- as.numeric(data$Metrik1)
data$Metrik2 <- as.numeric(data$Metrik2)
data$EventTimestamp <- as.numeric(data$EventTimestamp)
data$EventDay <- as.character(data$EventDay)
data$PatientID <- as.character(data$PatientID)
return(data)
}
execFunctionForAllAgencies <- function(fct, patientType, mfrowCount1, mfrowCount2, funtionType) {
allRawData <- NULL
par(mfrow = c(mfrowCount1, mfrowCount2), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,8,1) + 0.1)
for (i in 1:length(praxen)) {
dataIndicator = praxen[i]
print(paste0("Praxis: ", dataIndicator));
if (i == 3) { docs = 2 }
else if (i == 2) { docs = 4 }
else { docs = 1 }
RawData  <-  read.csv(paste0(dataFolder, 'eventMetrics', dataIndicator, '.csv'), sep = ";", quote = "\"'", dec = ",") %>%
left_join(read.csv(paste0(dataFolder, 'dailyAppointmentMetrics', dataIndicator, '.csv'), sep = ";", quote = "\"'", dec = ","), by = eventIndicator) %>%
left_join(read.csv(paste0(dataFolder, 'dailyPerAgentAppointmentMetrics', dataIndicator, '.csv'), sep = ";", quote = "\"'", dec = ","), by = eventIndicator)
RawData  <-  cleanRawData(RawData)
if (modData) {
RawData <- modDataFunction(RawData);
}
if ((patientType == 1) || (patientType == -1)) {
# Datensatz fuer Stammpatienten
Stammpatienten <- RawData[RawData$Stammpatient %in% c("1"), ]
fct(paste0(funtionType, " bezueglich Stammpatienten"), Stammpatienten)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
if (forEveryDoc && (docs > 1)) {
for (j in 1:docs) {
StammpatientenBeiDocJ <- Stammpatienten[Stammpatienten$AgentTag == j, ]
if ((!is_empty(StammpatientenBeiDocJ)) && (length(StammpatientenBeiDocJ[, 1]) > 0)) {
fct(paste0(funtionType, " bezueglich Stammpatienten bei Arzt ", j), StammpatientenBeiDocJ)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
}
}
if  ((patientType == 0) || (patientType == -1)) {
# Datensatz fuer Nicht-Stammpatienten
NichtStammpatienten <- RawData[RawData$Stammpatient %in% c("0"), ]
fct(paste0(funtionType, " bezueglich Nicht-Stammpatienten"), NichtStammpatienten)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
if (forEveryDoc && (docs > 1)) {
for (j in 1:docs) {
NichtStammpatientenBeiDocJ <- NichtStammpatienten[NichtStammpatienten$AgentTag == j, ]
if ((!is_empty(NichtStammpatientenBeiDocJ)) && (length(NichtStammpatientenBeiDocJ[, 1]) > 0)) {
fct(paste0(funtionType, " bezueglich Nicht-Stammpatienten bei Arzt ", j), NichtStammpatientenBeiDocJ)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
}
}
if (patientType == -1) {
# Datensatz fuer alle Patienten
fct(paste0(funtionType, " bezueglich allen Patienten"), RawData)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
if (forEveryDoc && (docs > 1)) {
for (j in 1:docs) {
PatientenBeiDocJ <- RawData[RawData$AgentTag == j, ]
if ((!is_empty(PatientenBeiDocJ)) && (length(PatientenBeiDocJ[, 1]) > 0)) {
fct(paste0(funtionType, " bezueglich allen Stammpatienten bei Arzt ", j), PatientenBeiDocJ)
mtext(paste0("Praxis ", praxen[i], " - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
}
}
test <- length(RawData[,1])
print(test)
testest1 <- RawData
testest2 <- allRawData
allRawData <<- rbind(testest1, testest2)
if( i == 1) {
testesttest1 <<- RawData;
testesttest1$Agency <<-  'B'
} else if (i == 2) {
testesttest2 <<- RawData;
testesttest2$Agency <<- 'IML'
} else if ( i == 3) {
testesttest3 <<- RawData;
testesttest3$Agency <<- 'WD'
} else {
testesttest4 <<- RawData;
testesttest4$Agency <<- 'NA'
}
}
ttest <<- allRawData
if ((patientType == 1) || (patientType == -1)) {
# Datensatz fuer Stammpatienten
Stammpatienten <- allRawData[allRawData$Stammpatient %in% c("1"), ]
fct(paste0(funtionType, " bezueglich Stammpatienten"), Stammpatienten)
mtext(paste0("Alle Praxen zusammengelegt - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
if  ((patientType == 0) || (patientType == -1)) {
# Datensatz fuer Nicht-Stammpatienten
NichtStammpatienten <- allRawData[allRawData$Stammpatient %in% c("0"), ]
fct(paste0(funtionType, " bezueglich Nicht-Stammpatienten"), NichtStammpatienten)
mtext(paste0("Alle Praxen zusammengelegt - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
if (patientType == -1) {
# Datensatz fuer alle Patienten
fct(paste0(funtionType, " bezueglich allen Patienten"), allRawData)
mtext(paste0("Alle Praxen zusammengelegt - ", funtionType), side = 3, line = -0.1, outer = TRUE)
}
}
print_explanation <- function (header, text) {
par(mfrow = c(1, 1), oma = c(2,1,4,1) + 0.1,  mar = c(0,1,4,1) + 0.1)
print_output(header, text);
}
percent <- function(x, digits = 2, format = "f") {
paste0(format(100 * x, format = format, digits = (digits + 2)), "%")
}
## Setup
###########
# Falls modData auf TRUE gesetzt wird, wird eine Funktion modDataFunction erwartet
# die die Input-Daten im Argument erhält und diese modifiziert wieder zurückgibt
modData = FALSE;
# Falls forEveryDoc auf TRUE gesetzt ist, so wird für jede Praxis mit mehr als einem Arzt
# zusätzlich zu der Untersuchung bzgl. der Gesamtpraxis auch die Untersuchung für jeden Arzt durchgeführt
forEveryDoc = TRUE;
# boolean: NutzeTagesSpannen
#  - falls FALSE wird Regression ueber alle IndirectWaitingPerdiod erstellt
#  - falls TRUE wird fuer jeden Vector c(a, b) in der Liste tagesSpannen jeweils eine Regression fuer IndirectWaitingPerdiod in [a, b] erstellt
NutzeTagesSpannen = FALSE;
tagesSpannen <- list( c(0, 7), c(8,14), c(15, 56), c(57, 250) )
source("functions.R")
# Die Regression die wir durchfuehren moechten, definieren wir hier
calc_binReg <- function(dataset) {
#result <- glm(Attended ~ freeSlots + shortSlots + bookedSlots, data = dataset, family = binomial)
result <- glm(Attended ~ IndirectWaitingPeriod + Metrik1 + Metrik2, data = dataset, family = binomial)
return(result)
}
# Die Print-Funktion die speziell für Regressionen angepasst ist definieren wir hier
dailyAppointmentsVsFuture <- function(title, data) {
print_reg(title, data, calc_binReg)
}
# Title-Seite zum späteren Füllen mit Beschreibung/Erklärung
print_explanation("Attended Binomal Regressions", "Text");
## Auszuführendes Skript übergeben, sodass es jeweils für alle Praxen ausgeführt wird
# execFunctionForAllAgencies(fct, patientType, mfrowCount1, mfrowCount2, funtionType) :
# - fct: die oben definierte Funktion, die für jede Praxis einzeln und für alle gemeinsam ausgeführt werden soll
# - patientType: für welche Patienten soll es durchgeführt werden, -1: alle Patienten, 1: Stammpatienten, 0: Nicht-Stammpatienten
# - mfrowCount1: Anzahl der Spalten von Plots pro Seite
# - mfrowCount2: Anzahl der Zeilen von Plots pro Seite
# - funtionType: Beschreibung der Funktion
execFunctionForAllAgencies(dailyAppointmentsVsFuture, -1, 3, 1, "Binomiale Regression")
View(testesttest1)
data2 <- rbind(testesttest1, testesttest2)
data <- rbind(data2, testesttest3)
View(data)
newData1 <- select(data, -c(EventTimestamp))
View(newData1)
newData1$WalkIn <- ifelse( (as.character(data$EventSubmitDay) == as.character(data$EventDay)), 1, 0 )
View(newData1)
http://www.sthda.com/english/wiki/exporting-data-from-r
write.csv2(newData1, file = "mnewData1tcars.csv")
